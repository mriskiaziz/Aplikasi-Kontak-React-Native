{"version":3,"file":"Contacts.js","sourceRoot":"","sources":["../src/Contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse, PermissionStatus, UnavailabilityError } from 'expo-modules-core';\nimport { Platform, Share } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExpoContacts from './ExpoContacts';\n\nexport type CalendarFormatType =\n  | typeof CalendarFormats.Gregorian\n  | typeof CalendarFormats.Buddhist\n  | typeof CalendarFormats.Chinese\n  | typeof CalendarFormats.Coptic\n  | typeof CalendarFormats.EthiopicAmeteMihret\n  | typeof CalendarFormats.EthiopicAmeteAlem\n  | typeof CalendarFormats.Hebrew\n  | typeof CalendarFormats.ISO8601\n  | typeof CalendarFormats.Indian\n  | typeof CalendarFormats.Islamic\n  | typeof CalendarFormats.IslamicCivil\n  | typeof CalendarFormats.Japanese\n  | typeof CalendarFormats.Persian\n  | typeof CalendarFormats.RepublicOfChina\n  | typeof CalendarFormats.IslamicTabular\n  | typeof CalendarFormats.IslamicUmmAlQura;\n\nexport type ContainerType =\n  | typeof ContainerTypes.Local\n  | typeof ContainerTypes.Exchange\n  | typeof ContainerTypes.CardDAV\n  | typeof ContainerTypes.Unassigned;\n\nexport type ContactType = typeof ContactTypes.Person | typeof ContactTypes.Company;\n\nexport type FieldType =\n  | typeof Fields.ID\n  | typeof Fields.ContactType\n  | typeof Fields.Name\n  | typeof Fields.FirstName\n  | typeof Fields.MiddleName\n  | typeof Fields.LastName\n  | typeof Fields.MaidenName\n  | typeof Fields.NamePrefix\n  | typeof Fields.NameSuffix\n  | typeof Fields.Nickname\n  | typeof Fields.PhoneticFirstName\n  | typeof Fields.PhoneticMiddleName\n  | typeof Fields.PhoneticLastName\n  | typeof Fields.Birthday\n  | typeof Fields.NonGregorianBirthday\n  | typeof Fields.Emails\n  | typeof Fields.PhoneNumbers\n  | typeof Fields.Addresses\n  | typeof Fields.SocialProfiles\n  | typeof Fields.InstantMessageAddresses\n  | typeof Fields.UrlAddresses\n  | typeof Fields.Company\n  | typeof Fields.JobTitle\n  | typeof Fields.Department\n  | typeof Fields.ImageAvailable\n  | typeof Fields.Image\n  | typeof Fields.RawImage\n  | typeof Fields.ExtraNames\n  | typeof Fields.Note\n  | typeof Fields.Dates\n  | typeof Fields.Relationships;\n\nexport type Date = {\n  day?: number;\n  month?: number;\n  year?: number;\n  id: string;\n  label: string;\n  format?: CalendarFormatType;\n};\n\nexport type Relationship = {\n  label: string;\n  name?: string;\n  id: string;\n};\n\nexport type Email = {\n  email?: string;\n  isPrimary?: boolean;\n  label: string;\n  id: string;\n};\n\nexport type PhoneNumber = {\n  number?: string;\n  isPrimary?: boolean;\n  digits?: string;\n  countryCode?: string;\n  label: string;\n  id: string;\n};\n\nexport type Address = {\n  street?: string;\n  city?: string;\n  country?: string;\n  region?: string;\n  neighborhood?: string;\n  postalCode?: string;\n  poBox?: string;\n  isoCountryCode?: string;\n  label: string;\n  id: string;\n};\n\nexport type SocialProfile = {\n  service?: string;\n  localizedProfile?: string;\n  url?: string;\n  username?: string;\n  userId?: string;\n  label: string;\n  id: string;\n};\n\nexport type InstantMessageAddress = {\n  service?: string;\n  username?: string;\n  localizedService?: string;\n  label: string;\n  id: string;\n};\n\nexport type UrlAddress = {\n  label: string;\n  url?: string;\n  id: string;\n};\n\nexport type Image = {\n  uri?: string;\n  width?: number;\n  height?: number;\n  base64?: string;\n};\n\nexport type Contact = {\n  id: string;\n  contactType: ContactType;\n  name: string;\n  firstName?: string;\n  middleName?: string;\n  lastName?: string;\n  maidenName?: string;\n  namePrefix?: string;\n  nameSuffix?: string;\n  nickname?: string;\n  phoneticFirstName?: string;\n  phoneticMiddleName?: string;\n  phoneticLastName?: string;\n  company?: string;\n  jobTitle?: string;\n  department?: string;\n  note?: string;\n  imageAvailable?: boolean;\n  image?: Image;\n  rawImage?: Image;\n  birthday?: Date;\n  dates?: Date[];\n  relationships?: Relationship[];\n  emails?: Email[];\n  phoneNumbers?: PhoneNumber[];\n  addresses?: Address[];\n  instantMessageAddresses?: InstantMessageAddress[];\n  urlAddresses?: UrlAddress[];\n\n  nonGregorianBirthday?: Date;\n  socialProfiles?: SocialProfile[];\n};\n\nexport type ContactResponse = {\n  data: Contact[];\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n};\n\nexport type ContactSort =\n  | typeof SortTypes.UserDefault\n  | typeof SortTypes.FirstName\n  | typeof SortTypes.LastName\n  | typeof SortTypes.None;\n\nexport type ContactQuery = {\n  pageSize?: number;\n  pageOffset?: number;\n  fields?: FieldType[];\n  sort?: ContactSort;\n  name?: string;\n  id?: string | string[];\n  groupId?: string;\n  containerId?: string;\n  rawContacts?: boolean;\n};\n\nexport type FormOptions = {\n  displayedPropertyKeys?: FieldType[];\n  message?: string;\n  alternateName?: string;\n  allowsEditing?: boolean;\n  allowsActions?: boolean;\n  shouldShowLinkedContacts?: boolean;\n  isNew?: boolean;\n  cancelButtonTitle?: string;\n  preventAnimation?: boolean;\n  groupId?: string;\n};\n\nexport type GroupQuery = {\n  groupId?: string;\n  groupName?: string;\n  containerId?: string;\n};\n\nexport type Group = {\n  name?: string;\n  id?: string;\n};\n\nexport type ContainerQuery = {\n  contactId?: string;\n  groupId?: string;\n  containerId?: string | string[];\n};\n\nexport type Container = {\n  name: string;\n  id: string;\n  type: ContainerType;\n};\n\nexport { PermissionStatus, PermissionResponse };\n\n/**\n * Returns whether the Contacts API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the Contacts API is available on the current device. Currently this resolves to `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoContacts.getContactsAsync;\n}\n\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: object = {}\n): Promise<any> {\n  if (Platform.OS === 'ios') {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    return await Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else if (!ExpoContacts.shareContactAsync) {\n    throw new UnavailabilityError('Contacts', 'shareContactAsync');\n  }\n  return await ExpoContacts.shareContactAsync(contactId, message);\n}\n\nexport async function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n  return await ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport async function getPagedContactsAsync(\n  contactQuery: ContactQuery = {}\n): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return await getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\nexport async function getContactByIdAsync(\n  id: string,\n  fields?: FieldType[]\n): Promise<Contact | undefined> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n  }\n  return undefined;\n}\n\nexport async function addContactAsync(contact: Contact, containerId?: string): Promise<string> {\n  if (!ExpoContacts.addContactAsync) {\n    throw new UnavailabilityError('Contacts', 'addContactAsync');\n  }\n  return await ExpoContacts.addContactAsync(contact, containerId);\n}\n\nexport async function updateContactAsync(contact: Contact): Promise<string> {\n  if (!ExpoContacts.updateContactAsync) {\n    throw new UnavailabilityError('Contacts', 'updateContactAsync');\n  }\n  return await ExpoContacts.updateContactAsync(contact);\n}\n\nexport async function removeContactAsync(contactId: string): Promise<any> {\n  if (!ExpoContacts.removeContactAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactAsync');\n  }\n  return await ExpoContacts.removeContactAsync(contactId);\n}\n\nexport async function writeContactToFileAsync(\n  contactQuery: ContactQuery = {}\n): Promise<string | undefined> {\n  if (!ExpoContacts.writeContactToFileAsync) {\n    throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n  }\n  return await ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\nexport async function presentFormAsync(\n  contactId?: string | null,\n  contact?: Contact | null,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (!ExpoContacts.presentFormAsync) {\n    throw new UnavailabilityError('Contacts', 'presentFormAsync');\n  }\n  if (Platform.OS === 'ios') {\n    const adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = undefined;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`'\n        );\n      }\n    }\n    return await ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return await ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\nexport async function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingGroupToContainerAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n  }\n\n  return await ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n}\n\nexport async function createGroupAsync(name?: string, containerId?: string): Promise<string> {\n  if (!ExpoContacts.createGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'createGroupAsync');\n  }\n\n  name = name || uuidv4();\n  if (!containerId) {\n    containerId = await getDefaultContainerIdAsync();\n  }\n\n  return await ExpoContacts.createGroupAsync(name, containerId);\n}\n\nexport async function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (!ExpoContacts.updateGroupNameAsync) {\n    throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n  }\n\n  return await ExpoContacts.updateGroupNameAsync(groupName, groupId);\n}\n\nexport async function removeGroupAsync(groupId: string): Promise<any> {\n  if (!ExpoContacts.removeGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n  }\n\n  return await ExpoContacts.removeGroupAsync(groupId);\n}\n\nexport async function addExistingContactToGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingContactToGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n  }\n\n  return await ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n}\n\nexport async function removeContactFromGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.removeContactFromGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n  }\n\n  return await ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n}\n\nexport async function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (!ExpoContacts.getGroupsAsync) {\n    throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n  }\n\n  return await ExpoContacts.getGroupsAsync(groupQuery);\n}\n\nexport async function getDefaultContainerIdAsync(): Promise<string> {\n  if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n    throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n  }\n\n  return await ExpoContacts.getDefaultContainerIdentifierAsync();\n}\n\nexport async function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (!ExpoContacts.getContainersAsync) {\n    throw new UnavailabilityError('Contacts', 'getContainersAsync');\n  }\n\n  return await ExpoContacts.getContainersAsync(containerQuery);\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoContacts.getPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'getPermissionsAsync');\n  }\n\n  return await ExpoContacts.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoContacts.requestPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'requestPermissionsAsync');\n  }\n\n  return await ExpoContacts.requestPermissionsAsync();\n}\n\n// Legacy\nexport const PHONE_NUMBERS = 'phoneNumbers';\nexport const EMAILS = 'emails';\nexport const ADDRESSES = 'addresses';\nexport const IMAGE = 'image';\nexport const RAW_IMAGE = 'rawImage';\nexport const NOTE = 'note';\nexport const BIRTHDAY = 'birthday';\nexport const NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport const NAME_PREFIX = 'namePrefix';\nexport const NAME_SUFFIX = 'nameSuffix';\nexport const PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport const PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport const PHONETIC_LAST_NAME = 'phoneticLastName';\nexport const SOCIAL_PROFILES = 'socialProfiles';\nexport const IM_ADDRESSES = 'instantMessageAddresses';\nexport const URLS = 'urlAddresses';\nexport const DATES = 'dates';\nexport const RAW_DATES = 'rawDates';\nexport const RELATIONSHIPS = 'relationships';\n\nexport const Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships',\n};\n\nexport const CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura',\n};\n\nexport const ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned',\n};\n\nexport const SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none',\n};\n\nexport const ContactTypes = {\n  Person: 'person',\n  Company: 'company',\n};\n"]}